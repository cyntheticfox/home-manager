{ config
, lib
, pkgs
, ...
}:

with lib;

let
  cfg = config.programs.powershell;

  mapAttrsToLines = f: attrs: concatStringsSep "\n" (mapAttrsToList f attrs);

  aliasesStr = mapAttrsToLines (k: v: "New-Alias -Name:'${k}' -Definition:'${v}'") cfg.shellAliases;
  envStr = mapAttrsToLines (k: v: "Set-Item -Name:'env:${k}' -Value:'${v}'") cfg.sessionVariables;

in
{
  options = {
    programs.powershell = {
      enable = mkEnableOption "Microsoft PowerShell (pwsh)";

      package = mkOption {
        default = pkgs.powershell;
        description = ''
          The package providing PowerShell.
        '';
        type = types.package;
      };

      defaultAliases = mkOption {
        default = true;
        description = ''
          Include the default aliases provided for PowerShell Cmdlets.

          See <link linkend="https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.core/about/about_aliases?view=powershell-7.2">about_aliases</link>.
        '';
        type = types.bool;
      };

      shellAliases = mkOption {
        default = { };
        description = ''
          User defined aliases for easily using Cmdlets

          Note: You can't define aliases to more than a command name, but you can alias functions
          that effectively do so for you.
        '';
        example = literalExpression ''
          {
            gh = "Get-Help";
            uph = "Update-Help";
          }
        '';
        type = types.attrsOf types.str;
      };

      sessionVariables = mkOption {
        default = { };
        description = ''
          Environment variables that will be set for the PowerShell session.
        '';
        example = literalExpression ''
          {
            MAILCHECK = "30";
          }
        '';
        type = types.attrsOf types.str;
      };

      initExtra = mkOption {
        default = "";
        description = ''
          Extra commands that should be added to your PowerShell profile.

          Note: These come before aliases, so you can define functions here and alias
          them with <varname><link linkend="opt-programs.powershell.shellAliases">opt-programs.powershell.shellAliases</link></varname>.
        '';
        type = types.lines;
      };

      initExtraFirst = mkOption {
        default = "";
        description = ''
          Extra commands that should be added to the top of your PowerShell profile.
        '';
        type = types.lines;
      };
    };
  };

  config = mkIf cfg.enable (mkMerge [
    {
      home.packages = with pkgs; [ cfg.package ];
    }
    {
      xdg.configFile."powershell/Microsoft.PowerShell_profile.ps1".text = ''
        # Generated by home-manager

        ${cfg.initExtraFirst}

        # Only source environment variables once
        if (-not (Test-Path -Path:'env:__HM_PWSH_SESS_VARS_SOURCED')) {
          New-Item -Path:'env:__HM_PWSH_SESS_VARS_SOURCED' -Value:'1'

          ${envStr}
        }

        ${optionalString (!cfg.defaultAliases) ''
          # Forcibly remove the default aliases
          Get-ChildItem -Path:'alias:' | Remove-Item -Force
        ''}

        ${cfg.initExtra}

        ${optionalString (aliasesStr != "") ''}
          # User-Defined Aliases
          ${aliasesStr}
        ''}
      '';
    }
  ]);
}
